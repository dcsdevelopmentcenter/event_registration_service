/*
 * User Registation API
 * User Registation API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: test@test.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dcs.user.registration.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;



/**
 * HTTP400Error
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-20T23:06:51.015514+01:00[Europe/London]")
public class HTTP400Error {
  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private Integer statusCode;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  /**
   * Gets or Sets errorClassification
   */
  @JsonAdapter(ErrorClassificationEnum.Adapter.class)
  public enum ErrorClassificationEnum {
    SECURITYVIOLATION("securityViolation"),
    
    CONTRACTVIOLATION("contractViolation"),
    
    FIELDVALUEVIOLATION("fieldValueViolation"),
    
    BUSINESSLOGICVIOLATION("businessLogicViolation");

    private String value;

    ErrorClassificationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ErrorClassificationEnum fromValue(String value) {
      for (ErrorClassificationEnum b : ErrorClassificationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ErrorClassificationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorClassificationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorClassificationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ErrorClassificationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ERROR_CLASSIFICATION = "errorClassification";
  @SerializedName(SERIALIZED_NAME_ERROR_CLASSIFICATION)
  private ErrorClassificationEnum errorClassification;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<ValidationError> errors;

  public HTTP400Error() {
  }

  public HTTP400Error statusCode(Integer statusCode) {
    
    this.statusCode = statusCode;
    return this;
  }

   /**
   * error HTTP status code
   * @return statusCode
  **/
  @javax.annotation.Nonnull
  public Integer getStatusCode() {
    return statusCode;
  }


  public void setStatusCode(Integer statusCode) {
    this.statusCode = statusCode;
  }


  public HTTP400Error message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * error message
   * @return message
  **/
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public HTTP400Error errorClassification(ErrorClassificationEnum errorClassification) {
    
    this.errorClassification = errorClassification;
    return this;
  }

   /**
   * Get errorClassification
   * @return errorClassification
  **/
  @javax.annotation.Nullable
  public ErrorClassificationEnum getErrorClassification() {
    return errorClassification;
  }


  public void setErrorClassification(ErrorClassificationEnum errorClassification) {
    this.errorClassification = errorClassification;
  }


  public HTTP400Error errors(List<ValidationError> errors) {
    
    this.errors = errors;
    return this;
  }

  public HTTP400Error addErrorsItem(ValidationError errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * Get errors
   * @return errors
  **/
  @javax.annotation.Nullable
  public List<ValidationError> getErrors() {
    return errors;
  }


  public void setErrors(List<ValidationError> errors) {
    this.errors = errors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HTTP400Error htTP400Error = (HTTP400Error) o;
    return Objects.equals(this.statusCode, htTP400Error.statusCode) &&
        Objects.equals(this.message, htTP400Error.message) &&
        Objects.equals(this.errorClassification, htTP400Error.errorClassification) &&
        Objects.equals(this.errors, htTP400Error.errors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(statusCode, message, errorClassification, errors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HTTP400Error {\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    errorClassification: ").append(toIndentedString(errorClassification)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("statusCode");
    openapiFields.add("message");
    openapiFields.add("errorClassification");
    openapiFields.add("errors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("statusCode");
    openapiRequiredFields.add("message");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to HTTP400Error
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!HTTP400Error.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HTTP400Error is not found in the empty JSON string", HTTP400Error.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!HTTP400Error.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HTTP400Error` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HTTP400Error.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("errorClassification") != null && !jsonObj.get("errorClassification").isJsonNull()) && !jsonObj.get("errorClassification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorClassification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorClassification").toString()));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            ValidationError.validateJsonObject(jsonArrayerrors.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HTTP400Error.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HTTP400Error' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HTTP400Error> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HTTP400Error.class));

       return (TypeAdapter<T>) new TypeAdapter<HTTP400Error>() {
           @Override
           public void write(JsonWriter out, HTTP400Error value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HTTP400Error read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }


}

